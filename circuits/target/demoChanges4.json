{"noir_version":"1.0.0-beta.1+03b58fa2dfcc8acc8cf5198b1b23b55676fbdb02","hash":11634627892512741675,"abi":{"parameters":[{"name":"tgt_chromosome","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"tgt_position","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"target_ref_allele","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"target_alt_allele","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},{"name":"participant1","type":{"kind":"struct","path":"ParticipantData","fields":[{"name":"chromosome","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"position","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"ref_allele","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"alt_allele","type":{"kind":"integer","sign":"unsigned","width":8}}]},"visibility":"private"},{"name":"participant2","type":{"kind":"struct","path":"ParticipantData","fields":[{"name":"chromosome","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"position","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"ref_allele","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"alt_allele","type":{"kind":"integer","sign":"unsigned","width":8}}]},"visibility":"private"},{"name":"participant3","type":{"kind":"struct","path":"ParticipantData","fields":[{"name":"chromosome","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"position","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"ref_allele","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"alt_allele","type":{"kind":"integer","sign":"unsigned","width":8}}]},"visibility":"private"},{"name":"participant4","type":{"kind":"struct","path":"ParticipantData","fields":[{"name":"chromosome","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"position","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"ref_allele","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"alt_allele","type":{"kind":"integer","sign":"unsigned","width":8}}]},"visibility":"private"}],"return_type":null,"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"}}},"bytecode":"H4sIAAAAAAAA/9WcW1ITQRSGTxK530mCRJCb3ASBTCaXCRAMIAgCkrgDKIJlWT64CxfgHnQlPuiDm3AhcnBGT41tXviP1d1VqcFu++M/f+WfmRySJOjXaN483oU/J24eqfDIYyY2lzDMJW8e3bG5lGHunmFvh2Gu07C3yzDXbdjbY5jrNeztM8z1G/YOGOYGDXuHDHPDhr0jhrlRw950OCdHKjzWw2P+bsOTLD9fLhZblULL872LfKF6GZTyxdJlOfACrxSUrgqB77eCYlCpXlYr+apX9FvedanqX4ewe0BWBlfjrS6iP89nORJgP5G6pd6spuCsAncM+GTQqntMGAzi5gUSHtYE0NMOIOs+uRlWpG6pd1xT8LgCN0d2h5XrzgmDQVzVsCaBnnYCWQ/IzbAidUu9E5qCJxS4k2R3WLnuSWEwiKsa1hTQ0y4g6yG5GVakbql3SlPwlAJ3muwOK9c9LQwGcVW08u16zsC9q68zltfNJ9MZhbpnCRvSqG/B3KhvoZGnWQUv5pS8mCO3ejjdQNYjcvPihdQt9c5rCp5X4C6Q3RcvrntBGAziOtPD6QGyFsnNsCJ1S71LmoKXFLjLZHdYue5lYTCI60wPpxfIekxuhhWpW+pd0RS8osBdJbvDynWvCoNBXGd6OH1A1hNyM6xI3VLvmqbgNQXuOtkdVq57XRgM4qpo5dv1ZcK/ft+wvG4+mW4o1J0nbEijvgVztXo46yEf7YWn5IVHbvVw+oGsArl58ULqlnp9TcG+ArdIdl+8uO6iMBjEdaaHMwBklcjNsCJ1S71lTcFlBW6F7A4r110RBoO4zvRwBoGsgNwMK1K31FvVFFxV4G6S3WHlujeFwSCuMz2cISBri9wMK1K31LutKXhbgVsju8PKddeEwSCuila+Xa8Q/vX7juV188l0R6Hup4QNadS3YK5WD6cW8tFe1JW8qJNbPZxhIGuX3Lx4IXVLvXuagvcUuPtk98WL694XBoO4zvRwRoCsZ+RmWJG6pd4DTcEHCtxDsjusXPehMBjEdaaHMwpkPSc3w4rULfUeaQo+UuAek91h5bqPhcEgrjM9nDSQ9YLcDCtSt9R7oin4RIF7SnaHles+FQaDuCpa+Xb9kPCv388sr5tPpmcKdb8kbEijvgVztXo4pyEf7cW5khfnpN/DmQOyPKCnDSVPG//B0zqQ1QB62lTytGnwNAn2FJgxrwnwtHV9O664/ujmaDg88r/562b4Wyyi7/Dijy7xJyL4jdb8fjV+Gwz/dX0o3MctFX6llhY8Cv1NiucohZxoLIbHbx+/f/n84eJKLP3+9IlpbavNWq3NWqPN2qs2a602a6/brL0Jj9kfu7n3Xz8dyLW3/1iLzu89sWNWrMub9vzdhhfxMzr82y9YiI+s+DkTqzMp1uogDREveh520N8jGVuL/m93TF8Cr8+La0kZflc00uExI+YiP38CF/zU6iBQAAA=","debug_symbols":"tdrdaupAFAXgd5lrL2bP397bVzkcStRYAiFK1AMH6bs3LY2VxE4h47rLJDPfAmWzBHM1u3pzeX1puv3hZNZ/rqY9bKtzc+iG1dU4+3nvdKy6j+XpXPVnsyZSXpm62w2Xzrm3ldk3bW3WabicbWb2X3uF/P3WvyvjCMs7LO+xfCjmJYx7RWZ8xPIJyzOWl2JeadyryU55hfLeYnnC8uVTqxrGvdbz1PdgP4D9CPbLJ5ds/A4QnQYwOkDQAfrUALI0CQgWHfB4hl2gW0BKy7srOCzvsXzA8rGYz3VXSFiesbxgeS3mc90VLZYnLO+wfPnUZosrBrAfwX4C++WTm6/FKOgABQck+9SAee8mQgf8MMMSxzOe7PLuSh7LBywfsXwq5nPdlRjLC5ZXKM+2mM91FxOWd1jeY/nyqc0WF0ewn8A+g/3yyc3XIis4QCw6gJ4aMO9dceiAxzPsnd4CYljeXRKwfMTyCctzMZ/rLhEsr1BeLZanYj7XXeqwvMfyAcuXT222uDSBfQb7AvbLJzdfi2QtPIHgCe6pCfPqHb4ZeMIPg8zfPx/Uzg7FJYfS74fmHzEvOfR4OoLc/sQIk0PDYtM3bdu8vty/hjDc/lf1TbVp66/l/tJt756e/x/HJ+P5Y3/Y1rtLX39In88G/h0=","file_map":{"62":{"source":"// Define a struct for participant genomic data (private)\nstruct ParticipantData {\n    chromosome: u32,\n    position: u32,\n    ref_allele: u8, // Encoded as 0=A, 1=T, 2=C, 3=G\n    alt_allele: u8,\n}\n\n// Main circuit for 4 participants (adjust size as needed)\nfn main(\n    // Public inputs: Target variant details\n    tgt_chromosome: pub u32,\n    tgt_position: pub u32,\n    target_ref_allele: pub u8,\n    target_alt_allele: pub u8,\n\n    // Private inputs: Genomic data for participants\n    participant1: ParticipantData,\n    participant2: ParticipantData,\n    participant3: ParticipantData,\n    participant4: ParticipantData,\n) {\n    // Check if a participant matches the target variant\n    let check_match = |participant: ParticipantData| -> u8 {\n        let chrom_match = (participant.chromosome == tgt_chromosome) as u8;\n        let pos_match = (participant.position == tgt_position) as u8;\n        let ref_match = (participant.ref_allele == target_ref_allele) as u8;\n        let alt_match = (participant.alt_allele == target_alt_allele) as u8;\n        chrom_match * pos_match * ref_match * alt_match // Returns 1 if all match\n    };\n\n    // Compute matches for each participant\n    let match1 = check_match(participant1);\n    let match2 = check_match(participant2);\n    let match3 = check_match(participant3);\n    let match4 = check_match(participant4);\n\n    let quadSum = match1 + match2 + match3 + match4;\n\n    // Enforce that all three participants match (sum must be 4)\n    assert(quadSum == 4); // Valid only if both participants match\n\n}\n","path":"/mnt/e/demoChanges4/demoChanges4/src/main.nr"}},"names":["main"],"brillig_names":["directive_invert"]}